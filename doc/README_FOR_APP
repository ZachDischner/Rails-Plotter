=Introduction
Welcome to the interactive database plotting web engine, built in Ruby on Rails. If you're reading this, then its likely you are trying to
connect this app with your database. This readme assumes you have some knowledge of Ruby on Rails. If you don't, online
resources can be great teachers. Most of what you're about to read shouldn't require much RoR insight, and the demo
should be comprehendible even for noobs.

This was built for the Laboratory for Atmospheric and Space Physics (LASP) in Boulder, Colorado.
Its AIM is to enable quick visulization of database numeric data, without spending months developing
your own custom solutions. Since LASP has a diverse scientific community, using many different database engines and schemas, I tried
to make this app as generic as I could, so that it may work for any of them. The goal is that this app will provide a
startup web server for any basic *single table* database table in under 2 hours. Most of that time will be installing
RoR dependencies. Once set up, you should be able to run the server for your database within 10 minutes, with only
minimal adjustments to the code itself.

To date (July 1 2012), I have successfully tested this app with the following databases:
* MySQL
* PostgreSQL
* SQLite
it should perform for other setups as well, but they have not been examined yet.

==Architecture
The architecture of this application is pretty simple, and there are really only 4 real pieces of code.

1.0 Selector View: An HTML page that contains selectors, tied to database information. This is where you use HTML elements
to essentially build your database query. These elements include:

* X axis variable
* Y axis variable(s)
* Different plot sets or filters (optional)
* X axis range selector using a numeric indicator (optional)
* X axis range selector using a date indicator (optional)
* Feature selector, enables different plot features aimed to help interaction

This page is found in */app/views/plots/index.html.erb*

2.0 Plot View: An HTML page that takes a data set obtained from your database, and from it renders interactive Dygraphs
plots.
This page is found in  */app/views/plots/plotter.html.erb*

3.0 Controller: Ruby file that grabs DB data necessary to construct HTML pages, and handles lots of the login requried in
that selection. Here, there are only two pages. There are two methods, one for the Selector page, and one for the Plot
page.
This file is found in */app/controllers/plots_controller.rb*

4.0 Plot Class: Ruby file that contains all the business logic of this application. The methods defined within are used
throughout the plotting process to fetch, parse, and regulate plot data.
This file is found in */app/models/plot.rb*

All files are well documented. Please review said documentation to get a better understanding of how it all works.
Logic, rendering, and selection are all kept separate as much as possible. The way its laid out now, this app should be
portable to other project platforms, such as Django.

=Setup

The best way to get started is to load up a demo and try it out.
BEWARE, The hardest thing is getting Ruby/Ruby on Rails and RoR + Databases to work cohesively.

==Environment
Obviously, you'll need to have Ruby, Ruby on Rails, and a Database client installed on your machine.
SQLite and MYSQL sample databases are included with this app for testing.  You *must* have MySQL installed on your
machine in order to for *>>bundle install* to work correctly.

Getting Ruby/RoR is notoriously difficult for some reason, though in practice it should be very simple.
Here is a basic tutorial:
http://eddorre.com/posts/rails-ultimate-install-guide-on-os-x-lion-using-rvm-homebrew-and-pow
I went through a similar tutorial, and searching through google got me though any problems I ran into.

This app is built using:
* Ruby 1.9.3-p125
* Rails 3.2.3
Using different versions of Ruby or Rails is known to cause some headaches. They may be easily fixed, but I've never
felt the need to try. Consider yourself warned.


I *strongly* recommend using a nice GUI to help manage everything.
RubyMine is my weapon of choice:
http://www.jetbrains.com/ruby
It is easy to use, very intelligent, and has great integration with GIT version control systems. It also has tools to
manage your versions of Ruby and Gems, which are much easier to use than trying to do it all from the Command Line. With
this program, you can easily manage which Ruby SDKs you are using and which are available, and make sure all Gems are up-to-date
and activated.

In addition, RubyMine has built in managers for data sources. It can be difficult to connect RoR to your databases, and
using this feature makes it much easier.

==Databases
Included in this package is a self contained SQLite3 table, and a script that will create a MySQL database and table.
Since required gems are dependant on local libraries, SQLite3 and MySQL will need to be installed on your machine in
order for this to work. If you really don't want to install them, you must change requirements in */config/Gemfile*
All necessary connection gems and database configurations for these databases are included.

The SQLite3 database is self contained, and is located in */db/sqlite_test.sqlite3*. It should be found and connected to
automatically. It is a simple and small table, where each column is a variable which can be plotted against other columns.

The MySQL database is populated using the text-file: */CreateTestTable.txt*

To populate your MySQL database, simply run:

    >>mysql < /dir/to/app/CreateTestTable.txt

This will build a MySQL test database and table full of stock market data. An important difference between the MySQL and
the SQLite3 database is in the schema. Where the SQLite3 database just has numeric columns to plot against each-other, the
MySQL database has a column of strings, which will be used to filter the rows within columns to plot. This is because for
a database full of stock market stats, you will have lots of the same variables *(open, close, volume, ect)* for a
variety of stock market symbols. The difference may seem moot, but it really represents a totally different approach
to data fetching and plotting. The two databases together will show how this app can handle both with ease.

Connecting the database to Rails often is difficult. Error like "database configuration does not specify adapter" pop up
even when the configurations are all correct. Fixing these errors often seems like magic. Simple restarts sometimes fixes
them. More often then not, digging through the interweb is the best way to solve these errors.

==The All Clear
Basically, you'll know everything is working correctly when you can successfully run the rails console, and typing:
    Plot.first
Returns the first row in your database.
Once this works for both of the provided databases (switching between will be covered shortly), you should be good to go!

Next, either from the command line or using *tools/bundle/install* in RubyMine, run:
    bundle install
to install all gems required for this app. If any fail to install, it is likely an issue with your environment setup.

=Take it for a Test Drive
Once everything is installed correctly (a never ending struggle), its time to try it out! I'll walk you through how to
use the app for each database. Hopefully this will illustrate how simple it will be to connect to your own database. The
RoR connection specifications for both can be found in */config/database.yml*. This is where you will put connection
information for your own database.

Normally, creating a web server designed to plot data from a database takes months to setup and lots of tweaking and
tinkering. Then, say you want to start over with an entirely different database server and a completely different table
schema. Most of the time, this requires a lot of modification to your server, if not a whole new setup.

Keeping that in mind, this app was designed to make this transition especially easy, as I will illustrate below.

==SQLite Database

(need to migrate and seed?)

This is a database built in Rails, populated in the */db/seeds.rb*. You can easily add or change the values in this
file, and update the database with:

    >>rake db:seed

This is a small, simple database. Each column contains a single variable, which can be plotted against other columns.
Configuring the app to run on this database happens in three places:
*Database Specs --> /config/database.yml
*Model          --> /app/models/plot.rb
*Controller     --> /app/controllers/plots_controller.rb

===Database Specs
This is where you tell Rails how to connect to your database
This section has been filled out for you. Look at */config/database.yml* and examine the database environment:
    sqlite_test:
Everything needed should be included there, and should connect automatically to the SQLite3 database.

===Model
This class definition is where you tell Ruby how to interpret and work with database data. This really is the 'meat and
potatoes' of the plotting app. The methods and code within is what turns a connection to a database into a epic
interactive plotting experience.

In the *Database Specs* section, you told RoR *how* to connect to your database. Here, you must give a few specifics
about *what* you are connecting to.

Now, edit/examine the *Database Table Specifications* section (near the top of the file). Two subsections have
been pre-defined. Make sure the MySQL section (1.0) is all commented out, and the SQLite3 section (2.0) is uncommented.
It should look like this:
      # 2.0
      #SQLITE test development environment
      establish_connection :sqlite_test                     # The connection specs in /config/database.yml
      set_table_name "plots"                                # Table name defined in the "CreateTestTable.txt" script
      @@find_filter = false                                 # Indicates that this database will require column filtering (No for unique columns)
      @@default_x       = [""]                              # Default selection for X axis
      @@default_y       = [""]                              # Default selection(s) for Y axis
      @@default_filter  = [""]                              # Default selection(s) for FILTER selection
      @@default_feature = [""]                              # Default selection for interaction FEATURE

The first two lines tell RoR which connection (of all listed in the */config/database.yml* file) to connect to, and which
table to use in that database connection.

The next 5 lines are optional.

* @@find_filter is an indicator, and should be set if your column relations are not unique. See *Filter Explanation* below
for a better description of this. If not set, there will be no filter applied automatically.
* @@default_* can be used when you know more about your database. They hold what you would like to be the options selected
by default in the HTML page where you choose plot options. Now, they are blank, if undefined, this program will set them
to [""] automatically.

==New parts????? Or Scopes??

===Controller
This file handles the querying of the database, and provides data to an HTML page for rendering.

*[[[HMM do I need to change how all this is going to work?]]]







