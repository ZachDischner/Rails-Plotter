=Introduction
Welcome to the interactive database plotting web engine, built in Ruby on Rails. If you're reading this, then its likely you are trying to
connect this app with your database. If so, read on.

This was built for the Laboratory for Atmospheric and Space Physics (LASP) in Boulder, Colorado.
Its AIM is to enable quick visulization of database numeric data, without spending months developing
your own custom solutions. Since LASP has a diverse scientific community, using many different database engines and schemas, I tried
to make this app as generic as I could, so that it may work for any of them. The goal is that this app will provide a
startup web server for any basic *single table* database table in under 2 hours. Most of that time will be installing
RoR dependencies. Once set up, you should be able to run the server for your database within 10 minutes, with only
minimal adjustments to the code itself.

To date (July 1 2012), I have successfully tested this app with the following databases:
* MySQL
* PostgreSQL
* SQLite
it should perform for other setups as well, but they have not been examined yet.

=Getting Started

The best way to get started is to load up a demo and try it out.
BEWARE, The hardest thing is getting Ruby/Ruby on Rails/ RoR + Databases to work cohesively.

==Environment
Obviously, you'll need to have Ruby, Ruby on Rails, and a Database client installed on your machine.
SQLite and MYSQL sample databases are included with this app for testing.  You **must** have MySQL installed on your
machine in order to for *>>bundle install* to work correctly.

Getting Ruby/RoR is notoriously difficult for some reason, though in practice it should be very simple.
Here is a basic tutorial:
http://eddorre.com/posts/rails-ultimate-install-guide-on-os-x-lion-using-rvm-homebrew-and-pow
I went through a similar tutorial, and searching through google got me though any problems I ran into.

This app is built using:
* Ruby 1.9.3-p125
* Rails 3.2.3
Using different versions of Ruby or Rails is known to cause some headaches. They may be easily fixed, but I've never
felt the need to try. Consider yourself warned.


I *strongly* recommend using a nice GUI to help manage everything.
RubyMine is my weapon of choice:
http://www.jetbrains.com/ruby
It is easy to use, very intelligent, and has great integration with GIT version control systems. It also has tools to
manage your versions of Ruby and Gems, which are much easier to use than trying to do it all from the Command Line. With
this program, you can easily manage which Ruby SDKs you are using and which are available, and make sure all Gems are up-to-date
and working activated.

==Databases
Included in this package is a self contained SQLite3 table, and a script that will create a MySQL database and table.
Both connections



